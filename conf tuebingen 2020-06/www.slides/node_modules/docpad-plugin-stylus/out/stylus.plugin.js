// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var StylusPlugin;
    return StylusPlugin = (function(superClass) {
      extend(StylusPlugin, superClass);

      StylusPlugin.prototype.name = 'stylus';

      StylusPlugin.prototype.config = {
        stylusRequire: null,
        stylusLibraries: {
          nib: true
        },
        stylusOptions: {
          compress: true,
          'include css': true
        },
        environments: {
          development: {
            stylusOptions: {
              compress: false
            }
          }
        }
      };

      function StylusPlugin() {
        StylusPlugin.__super__.constructor.apply(this, arguments);
        this.stylus = this.getConfig().stylusRequire || require('stylus');
        this;
      }

      StylusPlugin.prototype.render = function(opts, next) {
        var config, content, file, inExtension, library, option, outExtension, ref, ref1, style, value;
        inExtension = opts.inExtension, outExtension = opts.outExtension, content = opts.content, file = opts.file;
        config = this.getConfig();
        if ((inExtension === 'styl' || inExtension === 'stylus') && (outExtension === 'css' || outExtension === null)) {
          style = this.stylus(opts.content).set('filename', file.get('fullPath'));
          ref = config.stylusOptions;
          for (option in ref) {
            if (!hasProp.call(ref, option)) continue;
            value = ref[option];
            if (option === 'resolve url') {
              style.define('url', this.stylus.resolver(value));
            } else {
              style.set(option, value);
            }
          }
          ref1 = config.stylusLibraries;
          for (library in ref1) {
            if (!hasProp.call(ref1, library)) continue;
            value = ref1[library];
            if (!value) {
              continue;
            }
            if (value === true) {
              value = void 0;
            }
            style.use(require(library)(value));
          }
          return style.render(function(err, output) {
            if (err) {
              return next(err);
            }
            opts.content = output;
            return next();
          });
        } else {
          return next();
        }
      };

      return StylusPlugin;

    })(BasePlugin);
  };

}).call(this);
