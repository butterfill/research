"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.1
// Export Plugin
module.exports = function (BasePlugin) {
  var LivereloadPlugin;
  return LivereloadPlugin = function () {
    // Define Plugin
    var LivereloadPlugin = function (_BasePlugin) {
      _inherits(LivereloadPlugin, _BasePlugin);

      function LivereloadPlugin() {
        _classCallCheck(this, LivereloadPlugin);

        return _possibleConstructorReturn(this, (LivereloadPlugin.__proto__ || Object.getPrototypeOf(LivereloadPlugin)).apply(this, arguments));
      }

      _createClass(LivereloadPlugin, [{
        key: "populateCollections",

        // Populate Collections
        // Used to inject our scripts block with our socket generate listener
        value: function populateCollections(opts) {
          var config, docpad, generateAfterBlock, generateBeforeBlock, injectBlock, listenBlock, scriptBlock, styleBlock;
          // Prepare
          docpad = this.docpad;
          config = this.getConfig();
          // Blocks
          generateBeforeBlock = config.generateBeforeBlock || "if ( typeof document.getElementsByTagName !== 'undefined' ) {\n	document.getElementsByTagName('html')[0].className += ' wait';\n}";
          generateAfterBlock = config.generateAfterBlock || "document.location.reload();";
          listenBlock = config.listenBlock || "/* Did we just livereload? */\nvar log = !!(localStorage && console && console.log && true);\nif ( log && localStorage.getItem('" + config.channel + "/reloaded') === 'yes' ) {\n\tlocalStorage.removeItem('" + config.channel + "/reloaded');\n\tconsole.log('LiveReload completed at', new Date())\n}\n\n/* Listen for the regenerated event and perform a reload of the page when the event occurs */\nvar listen = function(){\n\tvar primus = new Primus('" + config.channel + "');\n\tprimus.on('data', function(data){\n\t\tif ( data && data.message ) {\n\t\t\tif ( data.message === 'generateBefore' ) {\n\t\t\t\tif ( log ) {\n\t\t\t\t\tconsole.log('LiveReload started at', new Date());\n\t\t\t\t}\n\t\t\t\t" + generateBeforeBlock + "\n\t\t\t}\n\t\t\telse if ( data.message === 'generateAfter' ) {\n\t\t\t\tif ( log ) {\n\t\t\t\t\tlocalStorage.setItem('" + config.channel + "/reloaded', 'yes');\n\t\t\t\t}\n\t\t\t\t" + generateAfterBlock + "\n\t\t\t}\n\t\t}\n\t});\n};";
          injectBlock = config.injectBlock || "/* Inject socket into our page */\nvar inject = function(){\n\tvar t = document.createElement('script');\n\tt.type = 'text/javascript';\n\tt.async = 'async';\n\tt.src = '" + config.pathname + "/primus.js';\n\tt.onload = listen;\n\tvar s = document.getElementsByTagName('script')[0];\n\ts.parentNode.insertBefore(t, s);\n};";
          scriptBlock = config.scriptBlock || (config.inject ? "(function(){\n\t" + listenBlock + "\n\t" + injectBlock + "\n\tif ( typeof Primus !== 'undefined' ) {\n\t\tlisten();\n\t} else {\n\t\tinject();\n\t}\n})();" : "(function(){\n\t" + listenBlock + "\n\tif ( typeof Primus !== 'undefined' ) {\n\t\tlisten();\n\t}\n})();");
          styleBlock = config.styleBlock || "html.wait {\n	cursor: wait !important;\n	opacity: 0;\n	transition: opacity 0.5s ease;\n}";
          // Script
          docpad.getBlock('scripts').add(scriptBlock, {
            defer: false
          });
          // Style
          docpad.getBlock('styles').add(styleBlock);
          return this;
        }

        // Setup Extend
        // Start our socket

      }, {
        key: "serverExtend",
        value: function serverExtend(opts) {
          var Primus, config, docpad, extendr, plugin, serverHttp, socketOptions;
          // Prepare
          serverHttp = opts.serverHttp;

          plugin = this;
          docpad = this.docpad;
          config = this.getConfig();
          // Configuration
          extendr = require('extendr');
          socketOptions = extendr.deep({}, config.socketOptions, {
            pathname: config.pathname
          });
          // Get socket using custom method if set
          this.socket = typeof config.getSocket === "function" ? config.getSocket(opts, socketOptions) : void 0;
          if (this.socket) {
            docpad.log('info', "LiveReload listening to custom socket on channel " + config.channel);
          } else {
            // Create a socket using primus
            Primus = require('primus');
            this.socket = new Primus(serverHttp, socketOptions);
            this.socket.on('error', docpad.warn);
            // Log
            docpad.log('info', "LiveReload listening to new socket on channel " + config.channel);
          }
          return this;
        }

        // Generate Before

      }, {
        key: "generateBefore",
        value: function generateBefore() {
          var ref;
          // Notify client
          if ((ref = this.socket) != null) {
            ref.write({
              message: 'generateBefore'
            });
          }
          return this;
        }

        // Generate After

      }, {
        key: "generateAfter",
        value: function generateAfter() {
          var ref;
          // Notify client
          if ((ref = this.socket) != null) {
            ref.write({
              message: 'generateAfter'
            });
          }
          return this;
        }

        // DocPad Destroy

      }, {
        key: "docpadDestroy",
        value: function docpadDestroy() {
          var ref;
          // Destroy the sockets
          if ((ref = this.socket) != null) {
            ref.destroy({
              close: false, // Close the HTTP server that Primus received
              end: true // End all active connections
            });
          }
          return this;
        }
      }]);

      return LivereloadPlugin;
    }(BasePlugin);

    ;

    // Plugin configuration
    LivereloadPlugin.prototype.name = 'livereload';

    // Plugin configuration
    // Only enable us on the development environment
    LivereloadPlugin.prototype.config = {
      channel: '/docpad-livereload',
      pathname: '/docpad-livereload',
      enabled: false,
      getSocket: null,
      inject: true,
      generateBeforeBlock: null,
      generateAfterBlock: null,
      listenBlock: null,
      injectBlock: null,
      scriptBlock: null,
      styleBlock: null,
      socketOptions: {
        transformer: 'websockets',
        parser: 'JSON'
      },
      environments: {
        development: {
          enabled: true
        }
      }
    };

    return LivereloadPlugin;
  }.call(this);
};