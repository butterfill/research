// Generated by CoffeeScript 2.3.1
// Export Plugin
module.exports = function(BasePlugin) {
  var LivereloadPlugin;
  return LivereloadPlugin = (function() {
    // Define Plugin
    class LivereloadPlugin extends BasePlugin {
      // Populate Collections
      // Used to inject our scripts block with our socket generate listener
      populateCollections(opts) {
        var config, docpad, generateAfterBlock, generateBeforeBlock, injectBlock, listenBlock, scriptBlock, styleBlock;
        // Prepare
        docpad = this.docpad;
        config = this.getConfig();
        // Blocks
        generateBeforeBlock = config.generateBeforeBlock || "if ( typeof document.getElementsByTagName !== 'undefined' ) {\n	document.getElementsByTagName('html')[0].className += ' wait';\n}";
        generateAfterBlock = config.generateAfterBlock || "document.location.reload();";
        listenBlock = config.listenBlock || `/* Did we just livereload? */\nvar log = !!(localStorage && console && console.log && true);\nif ( log && localStorage.getItem('${config.channel}/reloaded') === 'yes' ) {\n	localStorage.removeItem('${config.channel}/reloaded');\n	console.log('LiveReload completed at', new Date())\n}\n\n/* Listen for the regenerated event and perform a reload of the page when the event occurs */\nvar listen = function(){\n	var primus = new Primus('${config.channel}');\n	primus.on('data', function(data){\n		if ( data && data.message ) {\n			if ( data.message === 'generateBefore' ) {\n				if ( log ) {\n					console.log('LiveReload started at', new Date());\n				}\n				${generateBeforeBlock}\n			}\n			else if ( data.message === 'generateAfter' ) {\n				if ( log ) {\n					localStorage.setItem('${config.channel}/reloaded', 'yes');\n				}\n				${generateAfterBlock}\n			}\n		}\n	});\n};`;
        injectBlock = config.injectBlock || `/* Inject socket into our page */\nvar inject = function(){\n	var t = document.createElement('script');\n	t.type = 'text/javascript';\n	t.async = 'async';\n	t.src = '${config.pathname}/primus.js';\n	t.onload = listen;\n	var s = document.getElementsByTagName('script')[0];\n	s.parentNode.insertBefore(t, s);\n};`;
        scriptBlock = config.scriptBlock || (config.inject ? `(function(){\n	${listenBlock}\n	${injectBlock}\n	if ( typeof Primus !== 'undefined' ) {\n		listen();\n	} else {\n		inject();\n	}\n})();` : `(function(){\n	${listenBlock}\n	if ( typeof Primus !== 'undefined' ) {\n		listen();\n	}\n})();`);
        styleBlock = config.styleBlock || "html.wait {\n	cursor: wait !important;\n	opacity: 0;\n	transition: opacity 0.5s ease;\n}";
        // Script
        docpad.getBlock('scripts').add(scriptBlock, {
          defer: false
        });
        // Style
        docpad.getBlock('styles').add(styleBlock);
        return this;
      }

      // Setup Extend
      // Start our socket
      serverExtend(opts) {
        var Primus, config, docpad, extendr, plugin, serverHttp, socketOptions;
        // Prepare
        ({serverHttp} = opts);
        plugin = this;
        docpad = this.docpad;
        config = this.getConfig();
        // Configuration
        extendr = require('extendr');
        socketOptions = extendr.deep({}, config.socketOptions, {
          pathname: config.pathname
        });
        // Get socket using custom method if set
        this.socket = typeof config.getSocket === "function" ? config.getSocket(opts, socketOptions) : void 0;
        if (this.socket) {
          docpad.log('info', `LiveReload listening to custom socket on channel ${config.channel}`);
        } else {
          // Create a socket using primus
          Primus = require('primus');
          this.socket = new Primus(serverHttp, socketOptions);
          this.socket.on('error', docpad.warn);
          // Log
          docpad.log('info', `LiveReload listening to new socket on channel ${config.channel}`);
        }
        return this;
      }

      // Generate Before
      generateBefore() {
        var ref;
        // Notify client
        if ((ref = this.socket) != null) {
          ref.write({
            message: 'generateBefore'
          });
        }
        return this;
      }

      // Generate After
      generateAfter() {
        var ref;
        // Notify client
        if ((ref = this.socket) != null) {
          ref.write({
            message: 'generateAfter'
          });
        }
        return this;
      }

      // DocPad Destroy
      docpadDestroy() {
        var ref;
        // Destroy the sockets
        if ((ref = this.socket) != null) {
          ref.destroy({
            close: false, // Close the HTTP server that Primus received
            end: true // End all active connections
          });
        }
        return this;
      }

    };

    // Plugin configuration
    LivereloadPlugin.prototype.name = 'livereload';

    // Plugin configuration
    // Only enable us on the development environment
    LivereloadPlugin.prototype.config = {
      channel: '/docpad-livereload',
      pathname: '/docpad-livereload',
      enabled: false,
      getSocket: null,
      inject: true,
      generateBeforeBlock: null,
      generateAfterBlock: null,
      listenBlock: null,
      injectBlock: null,
      scriptBlock: null,
      styleBlock: null,
      socketOptions: {
        transformer: 'websockets',
        parser: 'JSON'
      },
      environments: {
        development: {
          enabled: true
        }
      }
    };

    return LivereloadPlugin;

  }).call(this);
};
