// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var CleancssPlugin, _ref;
    return CleancssPlugin = (function(_super) {
      __extends(CleancssPlugin, _super);

      function CleancssPlugin() {
        _ref = CleancssPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      CleancssPlugin.prototype.name = 'cleancss';

      CleancssPlugin.prototype.config = {
        cleancssOpts: {
          keepSpecialComments: '*',
          keepBreaks: false,
          benchmark: false,
          processImport: true,
          noRebase: false,
          noAdvanced: true,
          debug: false
        },
        environments: {
          development: {
            enabled: false
          }
        }
      };

      CleancssPlugin.prototype.writeAfter = function(opts, next) {
        var CleanCSS, TaskGroup, config, docpad, docpadConfig, plugin, tasks;
        CleanCSS = require('clean-css');
        TaskGroup = require('taskgroup').TaskGroup;
        plugin = this;
        config = this.getConfig();
        docpad = this.docpad;
        docpadConfig = docpad.getConfig();
        tasks = new TaskGroup({
          concurrency: 0,
          next: next
        });
        opts.collection.findAll({
          cleancss: {
            $exists: true
          }
        }).each(function(file) {
          if (file.get('cleancss') === false) {
            return;
          }
          return tasks.addTask(function(complete) {
            var cleanOpts, content, err, key, output, value, _ref1;
            content = file.get('contentRendered');
            cleanOpts = file.get('cleancss');
            if (cleanOpts === true) {
              cleanOpts = {};
            }
            cleanOpts.relativeTo = file.get('outDirPath');
            cleanOpts.root = docpadConfig.outPath;
            if (cleanOpts.processImport && content.indexOf('@import') !== -1) {
              file.setMetaDefaults({
                'referencesOthers': true
              });
            }
            _ref1 = config.cleancssOpts;
            for (key in _ref1) {
              if (!__hasProp.call(_ref1, key)) continue;
              value = _ref1[key];
              if (cleanOpts[key] == null) {
                cleanOpts[key] = value;
              }
            }
            try {
              output = new CleanCSS(cleanOpts).minify(content);
            } catch (_error) {
              err = _error;
              return complete(err);
            }
            file.set({
              contentRendered: output,
              contentRenderedWithoutLayouts: output
            });
            return file.action('write', complete);
          });
        });
        tasks.run();
        return this;
      };

      return CleancssPlugin;

    })(BasePlugin);
  };

}).call(this);
