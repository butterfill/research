---
layout: 'default2'
title: 'Testing'
weburl: ''
---

//-
//- (c) Stephen A. Butterfill 2014
//-


include ../../fragments/unit_mixins
include ../../fragments/logic_mixins


#title-slide.slide
  img.bkg(src='')
  .spacer &nbsp;
  .title-block: .title-container
      h1.title1 Logic I (PH126)
      h1.title2 #{document.title}
      h3.email s.butterfill@warwick.ac.uk
  if document.weburl
    .words
      span(style="position:relative;top:250px;left:450px;").white-box.big.center #{document.weburl}


+slide
  p Some of this stuff is old, not the best way to do it.
  p I try to keep the newer (better) stuff at the start.



+slide
  p Sometimes it's good to indicate where new elements have appeared, so 
    span.to-flash.hide this will flash
    span.step2.hide , and then 
    span.to-flash2.hide this will flash
  .slide 
    +show('.to-flash')
    +flash('.to-flash', 'white', 3000)
  .slide
    +show('.step2')
  .slide
    +show('.to-flash2')
    +flash('.to-flash2')

+slide_middle
  .qm
    +question_mark
  p.center nice big question mark behind some text
  .slide
    - css = {"margin-top":-200}
    - options = {duration:1000}
    +anim('.qm', css, options)


+slide
  p two animations, siblings
  .box(style='top:100px;left:100px;height:30px;width:30px;background-color:white;position:relative;')
  .slide
    - css = JSON.stringify({"top":'300px'})
    - options = JSON.stringify({duration:1000})
    .dv.dv-velocity(data-what='.box', data-css=css, data-options=options)
    - css2 = JSON.stringify({"left":'300px'})
    - options = JSON.stringify({duration:1000})
    .dv.dv-velocity(data-what='.box', data-css=css2, data-options=options)


+slide
  p two animations, nested
  .box(style='top:0px;left:0px;height:30px;width:30px;background-color:cyan;position:relative;')
  .slide
    - css = JSON.stringify({"top":'300px'})
    - css2 = JSON.stringify({"left":'300px'})
    - options = JSON.stringify({duration:1000})
    .dv.dv-velocity(data-what='.box', data-css=css, data-options=options)
      .dv.dv-velocity(data-what='.box', data-css=css2, data-options=options)


+slide
  p two animations, distinct elements
  .box3(style='top:100px;left:100px;height:30px;width:30px;background-color:red;position:relative;')
  .box4(style='top:100px;left:300px;height:30px;width:30px;background-color:green;position:relative;')
  .slide
    - css = {"left":'300px'}
    - css2 = {"top":'300px'}
    - options = {duration:1000}
    +anim('.box3', css, options)
    +anim('.box4', css2, options)

+slide
  p one animation, distinct elements, same class
  .box5(style='top:100px;left:100px;height:30px;width:30px;background-color:red;position:relative;')
  .box5(style='top:200px;left:300px;height:30px;width:30px;background-color:green;position:relative;')
  .slide
    - css = JSON.stringify({"top":'300px'})
    - options = JSON.stringify({duration:1000})
    .dv.dv-velocity(data-what='.box5', data-css=css, data-options=options)


+slide
  p test dv-attr
  p
    a.tomod(href='') This should change its href attribute
  .slide
    +attr('.tomod','href','http://google.co.uk')

+slide  
  p.hide This should appear second.
  p.first Let's see how to   
    span.to-show show 
    span.hide.to-hide hide 
    span  things.
  .slide
    +show('p:eq(0)')
  .slide
    +show('.to-hide')
    +hide('.to-show')


+slide
  p You can 
    span.to-invert invert
    span  parts of the 
    span.to-invert text
    span .
  .slide
    +invert('.to-invert')
  .slide
    p You can also uninvert.
  .slide
    +uninvert('.to-invert')

+slide
  p You can 
    span.hi1 highlight
    span  in different 
    span.hi2 colours
    span .
  .slide
    +highlight('.hi1','yellow')
    +highlight('.hi2','blue')
  .slide
    p.em-above And unhighlight all.
  .slide
    +unhighlight-all('.hi1, .hi2')

+slide
  p fade
  p.em-above After this line is done
  .slide
    +fade('p:eq(1)')
    p another will come.
  .slide
    +fade('p:eq(2)',2000)
    p And you can control how long the fade takes.
  .slide
    +unfade('p:eq(1)')
    p You can also bring faded things back.

+slide
  p glow
  p.em-above Text can 
    span glow
    span .
  .slide
    +glow('span:eq(0)')
  .slide
    p Remove glow with unglow
  .slide
    +unglow('span:eq(0)')

+slide
  p remove vs hide
  p.em-above.to-remove When you hide things, the positions of things do not change.
  p.em-above 
    span.to-remove But 
    span  when you remove things, things can move into the space they occupied.
  .slide
    +remove('.to-remove')
  
+slide
  p collapse and uncollapse (like remove)
  p.em-above Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis tristique lacus vel odio condimentum posuere. Morbi at risus venenatis, fringilla dui nec, aliquet dolor.
  p.em-above Proin quam arcu, ullamcorper a finibus quis, ultricies nec elit. Nam a erat suscipit, efficitur felis sed, suscipit libero. Quisque pharetra laoreet ante, vitae ullamcorper lorem auctor vestibulum.
  .slide
    +collapse('p:eq(1)',1000)
  .slide
    +uncollapse('p:eq(1)',1000)
    

+slide
  p image clip (cropping)
  p.em-above.step1 rect(0,200,200,0) shows a 200px square from top left
  p.step2.hide rect(200,999,999,200) with +anim
  p.step3.hide clip:auto with +clip
  
  +img_clip('kourtis_2014_fig4a.png', 'rect(0,200,200,0)')
  .slide
    +show('.step2')
    +hide('.step1')
    //- - css = {clip:rect(200,999,999,200)}
    - css = {clipTop:200,clipRight:999,clipBottom:999,clipLeft:200}
    +anim('img',css)
    //- +clip('img', 'rect(200,999,999,200)')
  .slide
    +hide('.step2')
    +show('.step3')
    +clip('img')

+slide
  p 
    span this will be 
      span.step2.hide un
      span highlighted
  .slide
    +highlight('p:eq(0) > span')
  .slide
    +show('.step2')
    +unhighlight('p:eq(0) > span')

+slide
  .to-blur
    p test 
      span.highlights1 highlights
      span  in text
    p test 
      span.highlights2 highlights
      span  in text
    p test 
      span.highlights3 highlights
      span  in text
    p test 
      span.highlights4 highlights
      span   
      span.in in
      span   
      span.text text
    .slide
      +invert('.highlights1')
    .slide
      +highlight('.highlights2')
    .slide
      +highlight('.highlights3','faint-blue')
    .slide
      +highlight('p:eq(2)','yellow')
    .slide
      +highlight('.highlights4', 'forestgreen')
    .slide
      +highlight('.in', 'lime')
    .slide
      +highlight('.text', 'orange')
  .slide.first-blur
    p will now blur 
      span.step2.hide and then unblur
    .slide
      +blur('.to-blur')
    .slide
      +show('.step2')
      +flash('.step2')
    .slide
      +unblur('.to-blur')
  .slide
    +blur('.first-blur, .second-blur')
    +fade('.first-blur, .second-blur')
    p Here's how to cross out
  .slide
    +line-through('p:eq(1)')
  .slide
    +line-through('p:eq(3) span:eq(2)')
  .slide
    p all will be highlights removed
  .slide
    +unhighlight-all('p, span')

+slide
  p test row bkg
  ol
    li first line (no span)
    li second line (no span)
  p test row bkg using span within li
  ol
    li
      span first line (in span)
    li
      span second line
  .slide
    +highlight-row('ol:eq(0) li:eq(0)' ) 
  .slide
    +unhighlight-row('ol:eq(0) li:eq(0)' )
    +highlight-row('ol:eq(0) li:eq(1)', 'pink')
  .slide
    +unhighlight-row('ol:eq(0) li:eq(1)', 'pink')
    +highlight-row('ol:eq(0) li:eq(0)', 'white' ) 
  .slide
    +unhighlight-row('ol:eq(0) li:eq(0)', 'white' ) 
  // second list
  .slide
    +highlight-row('ol:eq(1) li:eq(0) span' )
  .slide
    +unhighlight-row('ol:eq(1) li:eq(0) span' )
    +highlight-row('ol:eq(1) li:eq(1) span', 'pink')


+slide
  p Make things 
    span.to-glow glow
  .slide
    +glow('.to-glow')
  .slide
    +unglow('.to-glow')


+slide_middle
  p 
  +timer-element('timer1','30s',{hide:true})
    p.center A question
    p.step2.center.hide I'll give you 30 seconds.
  .slide
    +show('.step2')
    +show-timer('timer1')
  +start-timer('timer1')



+slide_rh_white({step:false})
  +run_across
    p.center Two sides of a story
  +left_half
    p To comprehend:
    ol
      li know that this person is pointing to location L;
      li don't use highlight-row in rh_white
      li know that what she is attempting to communicate is that object X it at L.
  +right_half({step:false})
    .notes Here's parallel view about production.
    p To produce:
    ol
      li know how to point to location L;
      li really don't use highlight-row in rh_white
      li know that what you can communicate is that object X is at L.
    .notes So why don't apes point?
    .notes Because they don't know (2) or (3) or both.
    .slide
      +highlight-row('ol:eq(1) li:eq(1)')
    .slide
      +unhighlight-row('ol:eq(1) li:eq(1)')
      +highlight-row('ol:eq(0) li:eq(1)')



.slide#test_blur
  .words: .container_12: .grid_12
    p.blur this is already blurred
    p.blur1 this will be blurred
    p
      span.highlight1 this will be highlighted
    .slide
      +blur('.blur1')
      +highlight('.highlight1','teal')




.slide
  .words
    .container_12: .grid_12
      table.truth-table
        tr
          td A
          td B
          td.result-col A ∨ B
        tr
          td T
          td T
          td.result-col T
          td.comment.hide <--- ‘surely this is illogical’
        tr
          td T
          td F
          td.result-col
            span.error F
            span.correct.hide T
        tr
          td F
          td T
          td.result-col 
            span.error F
            span.correct.hide T
        tr
          td F
          td F
          td.result-col F


.slide
  .words
    .container_12: .grid_12
      p test truth table mxin
      mixin truth-table(['A ∨ B','¬A'],[['T','T','T','F'],['F','F','T','T']])
      +add-class(".truth-table .row-3 .highlight-hook", "bkg-grey-row")


.slide
  .words
    div.middle.center
      p This is how to put stuff in the middle.
      p It can span multiple lines.
      p And contain nested paragraphs.

.slide
  .words
    .container_12
      .grid_6
        p left column
      .grid_6
        p right column


.slide
  img.bkg(src='/img/bkg/duckling.jpeg')
  .middle
    .container_12
      .grid_4
        .center.bkg-black-33
          h1(style="text-align: center") Trans Bkg Box 
          p S0.11
          p 3-5pm on Wednesdays

.slide
  div.white-box(style="width:230px;position:absolute;top:20px;left:500px;")
    p(style="padding: 0 0.3em;") An argument is 
      strong logically valid 
      | just if there's no possible situation in which the premises are true and the conclusion false.
  .slide
    div.white-box(style="width:230px;position:absolute;top:350px;left:500px;")
      p(style="padding: 0 0.3em;") An argument is 
        strong sound  
        | just if it is logically valid and all its premises are true.


.slide
  +df_valid({reveal:true})

.slide#right-half-white
  .words: .container_12: .grid_6
    p left half of the slide for a 
      span.invert nice 
      | layout. 
    p won't go onto the right half
  .right-half-white
    .words
      .container_12: .grid_6
        p test text here on the 
          span.noinvert right hand 
          | side
  .clear
  .container_12.em-above
    .grid_4.prefix_4
      p This should cut across the border between the black and white halves

.slide#left-half-white
  .left-half-white
  .words
    .container_12
      .grid_6.invert
        p left half of the slide for a nice layout
        p won't go onto the right half
      .grid_6
        p can put text on the right hand side like this too (easier design?)
    .clear
    .container_12.em-above
      .grid_6
        p text can be inverted too
      .grid_6
        p.invert text can be inverted too

.slide#white-bottom-half
  .bottom-third-white
    .container_12: .grid_12: .words
      .test text in white bkg?
  .words
    .container_12: .grid_12
      p normal text
    .container_12
      .grid_6
        p unaffected by the white bottom part
      .grid_6
        p normal text can continue above
  .slide
    .words.invert(style="position:absolute; top:450px;")
      .container_12
        .grid_6
          p test on white added later
        .grid_6
          p seems to work even with columns
  
    

.slide#connect_slide
  .words
    .container_12: .grid_12
      p test connectors
      p
        span#origin2.white-box from here (2)
      p (gap)
      p
        span#dest2.white-box  to here (2)
      p (gap)
    .container_12#jcont
      .grid_2
      .grid_2.skip_3
        span#origin from here
      .grid_2.skip_3
        span#dest to here
      
  script(src="/vendor/jquery.min.js")
  script.
    $(document).ready(function(){
      $('#connect_slide').bind('deck.becameCurrent', function(ev, direction){
        
        //- be sure to disable scale before adding connectors, otherwise positioning is off
        $.deck('disableScale')
        
        jsPlumb.connect({
          source : $('#origin2'),
          target : $('#dest2'),
          anchors : ["RightMiddle","RightMiddle"],
          container: $('#connect_slide')
        });

        jsPlumb.connect({
          source : $('#origin'),
          target : $('#dest'),
          endpoint : ["Dot", {radius:3}],
          anchors : ["TopCenter","BottomCenter"],
          overlays : [
            // ["PlainArrow", {length:50, width:20, location:0.95}]
          ],
          container: $('#connect_slide')
        });

        //- re-enable scale afer adding connectors
        $.deck('enableScale')
        
      });
    });

.slide#connect-anim-slide
  .words
    .container_12: .grid_12
      p test connectors with deck.velocity plugin
      p.em-above
        span#origin-b2.white-box from here (2)
      p.em-above
        span#dest-b2.white-box  to here (2)
      .slide
        +connect({from:'#origin-b2', to:'#dest-b2', fromAnchor:"LeftMiddle",color:"hotpink"})

.slide#connect-anim-mixin-slide
  .words
    .container_12: .grid_12
      p test connectors with mixin that uses deck.velocity plugin
      p.em-above from here  
        span#origin-c (1)
      p.em-above to here  
        span#dest-c (2)
      .slide
        +connect({from:'#origin-c', to:'#dest-c', fromAnchor:'BottomCenter', color:'turquoise'})

        


//- proofs: manual proofs (testing)


.slide#fitch1
  .words
    table.fitch-proof
      tr
        td 
        td 1.
        td.the-source  P ∧ Q
        td
      tr
        td.last-premise
        td 2.
        td Q ∧ R
      tr
        td
          span.bkg-grey-row &#8203;
        td 3.
        td P
        td ∧Elim:
          span.target 1
      tr
        td
        td 4.
        td R
        td ∧Elim: 2
      tr
        td
        td 5.
        td P ∧ R
        td ∧Intro: 3,4
  script(src="/vendor/jquery.min.js")
  script.
    $(document).ready(function(){
      $('#fitch1').bind('deck.becameCurrent', function(ev, direction){
        
        //- be sure to disable scale before adding connectors, otherwise positioning is off
        $.deck('disableScale')
        
        console.log('connecting bits of proof together')
        jsPlumb.connect({
          source : $('#fitch1 .the-source'),
          target : $('#fitch1 .target'),
          anchors : ["RightMiddle","RightMiddle"],
          container: $('#fitch1')
        });

        //- re-enable scale afer adding connectors
        $.deck('enableScale')
        
      });
    });





+slide
  p fitch proof with explicit tables
  table.fitch-proof
    tr
      td 
      td 1.
      td  P ∧ Q
      td
    tr
      td.last-premise
      td 2.
      td Q ∧ R
    tr
      td
      td(colspan=3) 
        table.fitch-proof
          tr
            td.last-premise
            td 3.
            td Q ∧ R
          tr
            td
              span.bkg-grey-row &#8203;
            td 4.
            td P
            td ∧Elim: 1
          tr
            td
            td 5.
            td R
            td ∧Elim: 2
          tr
            td
            td 6.
            td P ∧ R
            td ∧Intro: 3,4
    tr
      td
      td 7.
      td R
      td ∧Elim: 2
    tr
      td
      td 8.
      td P ∧ R
      td ∧Intro: 3,4





// simple example, with highlights
+slide
  p fitch proof built with mixins
  - var prf1 = {premises:['P ∧ Q', 'Q ∧ R'], lines:[['P','∧Elim', [1]],['R', '∧Elim',[2]]]}
  #firstproof
    mixin fitch_proof(prf1)
  
  //- highlight bits of the proof
  .slide
    +highlight-proof-row(3)
  
  //- highlight bits of the proof and draw a connector linking them
  #fitch1_high
    .slide
      +unhighlight-proof-row(3)
      +highlight_citation(3,1)
    .slide
      +highlight_cited_sentence(1)
    .slide
      +connect({from:'#firstproof .fitch-proof .row-1 .sentence', to:'#firstproof .fitch-proof .row-3 .citation-1', color:'yellow'})

  .slide
    +unhighlight_citation(3,1)
  .slide
    +unhighlight_cited_sentence(1)
  .slide
    +highlight-proof-row(4)

// lots of proofs on a page, with subproofs
.slide
  .words
    - var prf = {premises:['P ∧ Q', 'Q ∧ R'], lines:[['P','∧Elim', [1]],['R', '∧Elim',[2]]]}
    - var short_prf = {premises:['P'],lines:[['P','∧Elim', [1]]]}
    - var nested_prf = {premises:['P'],lines:[short_prf,['P','∧Elim', [1]]]}
    - var prf2 = {premises:['P ∧ Q', 'Q ∧ R'], lines:[['P','∧Elim', [1]],short_prf,nested_prf,['R', '∧Elim',[2]]]}
    .container_12
      .grid_6
        mixin fitch_proof(prf)
      .grid_6
        mixin fitch_proof(prf2)

+slide_middle 
  p.center the end
        
